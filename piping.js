// Generated by CoffeeScript 1.5.0
(function() {
  var cluster, natives, options, path,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cluster = require("cluster");

  path = require("path");

  natives = ['assert', 'buffer', 'child_process', 'cluster', 'console', 'constants', 'crypto', 'dgram', 'dns', 'domain', 'events', 'freelist', 'fs', 'http', 'https', 'module', 'net', 'os', 'path', 'punycode', 'querystring', 'readline', 'repl', 'stream', 'string_decoder', 'sys', 'timers', 'tls', 'tty', 'url', 'util', 'vm', 'zlib'];

  options = {
    hook: false,
    includeModules: false,
    main: require.main.filename,
    ignore: /(\/\.|~$)/
  };

  module.exports = function(ops) {
    var chokidar, currentFile, currentPath, initial, key, messageHandler, module, value, watcher, worker, _load_orig;
    for (key in ops) {
      value = ops[key];
      options[key] = value;
    }
    if (cluster.isMaster) {
      cluster.setupMaster({
        exec: options.main,
        args: process.argv
      });
      chokidar = require("chokidar");
      currentFile = options.main;
      currentPath = path.dirname(currentFile);
      initial = options.hook ? currentFile : currentPath;
      watcher = chokidar.watch(initial, {
        ignored: options.ignore,
        ignoreInitial: true
      });
      worker = cluster.fork();
      messageHandler = function(message) {
        return watcher.add(message.file);
      };
      worker.on("message", messageHandler);
      cluster.on("exit", function(dead, code, signal) {
        worker = cluster.fork();
        return worker.on("message", messageHandler);
      });
      watcher.on("change", function(file) {
        console.log("[piping] File", path.relative(currentPath, file), "has changed, reloading.");
        return worker.destroy();
      });
      return false;
    } else {
      if (options.hook) {
        module = require("module");
        _load_orig = module._load;
        module._load = function(name, parent, isMain) {
          var file;
          file = module._resolveFilename(name, parent);
          if (options.includeModules || file.indexOf("node_modules") === -1) {
            if (__indexOf.call(natives, file) < 0) {
              cluster.worker.send({
                file: file
              });
            }
          }
          return _load_orig(name, parent, isMain);
        };
      }
      return true;
    }
  };

}).call(this);
