// Generated by CoffeeScript 1.10.0
(function() {
  var cluster, colors, options, path;

  cluster = require("cluster");

  path = require("path");

  colors = require("colors");

  options = {
    hook: false,
    includeModules: false,
    main: require.main.filename,
    ignore: /(\/\.|~$)/
  };

  module.exports = function(ops) {
    var chokidar, initial, key, value, watcher, worker;
    if (typeof ops === "string" || ops instanceof String) {
      options.main = path.resolve(ops);
    } else {
      for (key in ops) {
        value = ops[key];
        options[key] = value;
      }
    }
    if (cluster.isMaster) {
      cluster.setupMaster({
        exec: path.join(path.dirname(module.filename), "launcher.js")
      });
      chokidar = require("chokidar");
      initial = options.hook ? options.main : path.dirname(options.main);
      watcher = chokidar.watch(initial, {
        ignored: options.ignore,
        ignoreInitial: true,
        usePolling: options.usePolling,
        interval: options.interval || 100,
        binaryInterval: options.binaryInterval || 300
      });
      worker = cluster.fork();
      cluster.on("exit", function(dead, code, signal) {
        if (worker === null) {
          return worker = cluster.fork();
        } else {
          return worker = null;
        }
      });
      cluster.on("online", function(worker) {
        worker.send(options);
        return worker.on("message", function(message) {
          if (message.err) {
            console.log("[piping]".bold.red, "can't execute file:", options.main);
            return console.log("[piping]".bold.red, "error given was:", message.err);
          } else if (message.file) {
            return watcher.add(message.file);
          }
        });
      });
      watcher.on("change", function(file) {
        console.log("[piping]".bold.red, "File", path.relative(process.cwd(), file), "has changed, reloading.");
        if (worker) {
          worker.kill();
          return worker = null;
        } else {
          return worker = cluster.fork();
        }
      });
      return false;
    } else {
      return true;
    }
  };

}).call(this);
